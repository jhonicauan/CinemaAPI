// <auto-generated />
using System;
using CinemaAPI.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CinemaAPI.Migrations
{
    [DbContext(typeof(ConnectionContext))]
    [Migration("20250221200910_TablesAdd")]
    partial class TablesAdd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CinemaAPI.Model.CategoryModel", b =>
                {
                    b.Property<int>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCategory"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.HasKey("IdCategory");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CinemaAPI.Model.MovieCategoryModel", b =>
                {
                    b.Property<int>("IdMovie")
                        .HasColumnType("integer");

                    b.Property<int>("IdCategory")
                        .HasColumnType("integer");

                    b.HasKey("IdMovie", "IdCategory");

                    b.HasIndex("IdCategory");

                    b.ToTable("MovieCategories");
                });

            modelBuilder.Entity("CinemaAPI.Model.MovieSessionModel", b =>
                {
                    b.Property<int>("IdMovieSession")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdMovieSession"));

                    b.Property<int>("IdMovie")
                        .HasColumnType("integer");

                    b.Property<int>("IdRoom")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SeassonDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IdMovieSession");

                    b.HasIndex("IdMovie");

                    b.HasIndex("IdRoom");

                    b.ToTable("MovieSession");
                });

            modelBuilder.Entity("CinemaAPI.Model.MoviesModel", b =>
                {
                    b.Property<int>("IdMovie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IdMovie");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdMovie"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("Active");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("ImageUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.HasKey("IdMovie");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("CinemaAPI.Model.RoomsModel", b =>
                {
                    b.Property<int>("IdRoom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdRoom"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdRoom");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("CinemaAPI.Model.SeatsModel", b =>
                {
                    b.Property<int>("IdSeat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSeat"));

                    b.Property<int>("IdRoom")
                        .HasColumnType("integer");

                    b.Property<string>("RowLetter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TypeSeat")
                        .HasColumnType("integer");

                    b.HasKey("IdSeat");

                    b.HasIndex("IdRoom");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("CinemaAPI.Model.TicketModel", b =>
                {
                    b.Property<int>("IdTicket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTicket"));

                    b.Property<int>("IdMovieSession")
                        .HasColumnType("integer");

                    b.Property<int>("IdSeat")
                        .HasColumnType("integer");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer");

                    b.Property<int>("TypeTicket")
                        .HasColumnType("integer");

                    b.HasKey("IdTicket");

                    b.HasIndex("IdMovieSession");

                    b.HasIndex("IdSeat");

                    b.HasIndex("IdUser");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("CinemaAPI.Model.UsersModel", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IdUser");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdUser"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("Password");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("Role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Username");

                    b.HasKey("IdUser");

                    b.HasIndex("IdUser")
                        .IsUnique()
                        .HasDatabaseName("pk_user");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CinemaAPI.Model.MovieCategoryModel", b =>
                {
                    b.HasOne("CinemaAPI.Model.CategoryModel", "Category")
                        .WithMany("MovieCategories")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CinemaAPI.Model.MoviesModel", "Movies")
                        .WithMany("MovieCategories")
                        .HasForeignKey("IdMovie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("CinemaAPI.Model.MovieSessionModel", b =>
                {
                    b.HasOne("CinemaAPI.Model.MoviesModel", "Movie")
                        .WithMany("MovieSessions")
                        .HasForeignKey("IdMovie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CinemaAPI.Model.RoomsModel", "Room")
                        .WithMany("MovieSessions")
                        .HasForeignKey("IdRoom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("CinemaAPI.Model.SeatsModel", b =>
                {
                    b.HasOne("CinemaAPI.Model.RoomsModel", "Room")
                        .WithMany("Seats")
                        .HasForeignKey("IdRoom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("CinemaAPI.Model.TicketModel", b =>
                {
                    b.HasOne("CinemaAPI.Model.MovieSessionModel", "MovieSession")
                        .WithMany("Tickets")
                        .HasForeignKey("IdMovieSession")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CinemaAPI.Model.SeatsModel", "Seat")
                        .WithMany("Tickets")
                        .HasForeignKey("IdSeat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CinemaAPI.Model.UsersModel", "Users")
                        .WithMany("Tickets")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovieSession");

                    b.Navigation("Seat");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CinemaAPI.Model.CategoryModel", b =>
                {
                    b.Navigation("MovieCategories");
                });

            modelBuilder.Entity("CinemaAPI.Model.MovieSessionModel", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("CinemaAPI.Model.MoviesModel", b =>
                {
                    b.Navigation("MovieCategories");

                    b.Navigation("MovieSessions");
                });

            modelBuilder.Entity("CinemaAPI.Model.RoomsModel", b =>
                {
                    b.Navigation("MovieSessions");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("CinemaAPI.Model.SeatsModel", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("CinemaAPI.Model.UsersModel", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
